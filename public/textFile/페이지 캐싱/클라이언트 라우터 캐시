✅Client Router Cache:클라이언트 라우터 캐시
(이름 그대로 클라이언트의 브라우저에 저장되는 캐시)

- 브라우저에 저장되는 캐시
- 페이지 이동을 효율적으로 진행하기 위해 '페이지의 일부 데이터'를 보관함


1. 브브라우저를 통해 인덱스 페이지(정적인 페이지니까 Nextjs 서버는 우선 풀 라우트 캐시에 이 페이지가 저장된다.)에 초기 접속 요청을 보내게 되면 풀라우트 캐시에 저장됨

1-1 만약 존재하게된다면 캐싱된 데이터를 바로 반환해 주게된다.

2. 1 접속후 바로 search 페이지로 이동하게 되면은 브라우저에서는 지금처럼 Nextjs 서버에게
서치 페이지에 해당하는 데이터를 요청하게된다.
이번에 서치페이지는 어떤 페이지인가 살펴보자.

3. 서치페이지는 동적인 페이지이다. 그러면 '풀 라우트 캐시'는 스킵!된다. 
3-1. 실시간으로 페이지를 생성하기 위해서 이런 리퀘스트 메모이제이션 또는 데이터 캐시를 거쳐서 페이지를 실시간으로 생성 후 생성한 페이지를 브라우저에게 응답한다.

----
여기까지는 잘알고 있는 내용인데 이런식으로만 작동된다면 문제가 있다.

그래서
클라이언트 라우터 캐시는
브라우저에서 이런식으로 넥스트 서버에서 접속 요청을 보냈을 때 
그때 넥스트 서버가 브라우저에게 보내주는 여러가지 페이지의 데이터들 중에 이러한 
- 루트 레이아웃이나 
- 서치바 레이아웃처럼
해당하는 페이지의 '레이아웃을 담당'하는 'RSC 페이로드의 데이터만' 이 클라이언트 라우터 캐시라는 공간에 캐싱하게 된다라는 뜻.

앞으로는 새로운 페이지를 요청 시에도 클라이언트 라우터 캐시라는 공간에 저장된
공통된 레이아웃을 사용하면 되겠지?(서버로부터 다시 중복되게 불러오지 않을 수 있도록 페이지의 최적화해주는 그러한 기술이라고 생각하면된다.)

그외 중복되지 않은 추가적인 페이지나 또는 기타 등등의 서버컴포넌트들만 따로 불러오게 설정을 할 수 있다.

*그리고 이러한 기술이 자동으로 우리 넥스트 앱에 다 적용이 되어 있다.
*단 새로고침 / 탭 닫고 다시 접속 시에는 동작하지 않는다.(새롭게 레이아웃을 생성한다는 뜻)
ㄴ src\app\(with-searchbar)\layout.tsx


🚨정리(클라이언트 라우터 캐시는 주로 어떤 목적인가?)
페이지 전환 시 RSC 페이로드에서 추출한 레이아웃 컴포넌트 데이터를 브라우저 메모리에 저장하여 재사용하기 위해