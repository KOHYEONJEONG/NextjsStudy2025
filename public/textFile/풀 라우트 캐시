✅풀 라우트 캐시(Full Route Cache)
- 🚨페이지 캐싱 기능 - 페이지들이 이렇게 빌드 타임에 정적으로 미리 생성이 되어서 풀라우트 캐시에 보관이 되는건지 확인해보자)
- Next 서버측에서 '빌드 타임(프로젝트가 빌드된다는 뜻)'에 특정 페이지의 렌더링 결과를 캐싱하는 기능
ex) ⭐빌드타임에 데이터도 불러오고 데이터 캐싱도하고 생성(페이지 렌더링 결과)해서 풀라우트 캐시에 담는다.
--------------------------------
✅2가지로 나뉜다.
1. 정적 페이지 : 풀 라우트 캐시가 적용됨.
2. 동적 페이지
--------------------------------
Dynamic Page로 설정되는 기준(🚨빌드타임에 생성되지 않기에 풀 라우트 캐시에 저장이 되지 않는다 +  조금 느린 속도로 응답된다.)
"브라우저로부터 특정 페이지가 접속 요청을 받을 때 마다 매번 변화가 생기거나, 데이터가 달라질 경우"
1. 캐시되지 않는 Data Fetching을 사용할 경우(캐시 옵션이 존재하지 않을 경우 == 옵션 중 no store) <- 매번 새로운 데이터 불러옴.
ㄴ 🚩그럼 이 컴포넌트를 사용하는 모든 페이지들은 자동으로 동적인 페이지로서 설정된다.

2. 동적 함수(쿠키, 헤더, 쿼리스트링)을 사용하는 컴펀트가 있을 때
ㄴ 요청에 따라 자주 변화할 수 있는 기능을 빼오는 행위

3. 🚩그렇다면 절대 사용하면 안되는 페이지인가? 안티패턴인가? '아니다.'
ㄴ ex1 . 서치 페이지인경우 무조건 쿼리스트링(동적함수 이용)을 사용해야 한다.
ㄴ ex2 . 현재 사용자의 인증 정보를 확인하기 위해서 쿠키 값을 조회해야한다던지.
ㄴㄴㄴ 되도록이면 static page로 설정하는게 낫지만 항상 엄청나게 느리거나 엄청나게 안 좋은것까지는 아니다.
=> 그러면? 불러온 데이터를 데이터 캐시에 저장해두고 데이터 캐시에 저장된 값을 사용하고 
+ 리퀘스트 메모이션을 사용하기 때문이다.(풀라이트 캐시 뺴고!)
--------------------------------
🚩Static Page로 설정되는 기준
1. Dynamic Page가 아니면 무조건 모든 페이지가 Static Page가 된다.(Default)
ㄴ 무조건 동적함수가 없어야 한다, 데이터 캐시는 있어도 상관없다.
=> 풀라우트 캐시(즉 페이지 캐싱이 제공된다.) 사용 = 굉장히 빠른속도로 제공된다.

------------------------
✅revalidate 옵션
- Page Router에 ISR과 비슷.
- 특정 시간을 주기로 재생성 즉 갱신도 가능.


✅정리
페이지 캐싱은 빌드타입에 해당하는 페이지를 생성한 결과가 풀라우트 캐시라는 이름으로 보관되며
그리고
그렇게 보관된 페이지 캐시가 브라우저에 접속 요청을 받았을 때 
즉각적으로 응답이 되어서 굉장히 빠른 속도로 페이지를 제공하는데 도움을 준다.



npm run build 시 아래 출력 결과
✅ f라고 붙으면 동적 페이지
✅ ○ 라고 붙으면 정적 페이지(_not-found 페이지만 정적 페이지)

Route (app)                                 Size  First Load JS
┌ ƒ /                                      300 B         105 kB
├ ○ /_not-found                            977 B         102 kB
├ ƒ /book/[id]                             295 B         101 kB
└ ƒ /search                                276 B         105 kB
+ First Load JS shared by all             101 kB
  ├ chunks/4bd1b696-52a6696c08e3276c.js  53.2 kB
  ├ chunks/684-a90f75b76908eb92.js       45.9 kB
  └ other shared chunks (total)          2.01 kB


○  (Static)   prerendered as static content
ƒ  (Dynamic)  server-rendered on demand


정적페이지로 변경해볼까?
-> / (인덱스 페이지)도 정적페이지로 변경된걸 볼 수 있다.
(no-store 옵션이 꼭 필요하지 않으면 force-cache 옵션을 사용하여 정적페이지로 변경하였다.)

Route (app)                                 Size  First Load JS  Revalidate  Expire
┌ ○ /                                      300 B         105 kB          3s      1y
├ ○ /_not-found                            977 B         102 kB
├ ƒ /book/[id]                             295 B         101 kB
└ ƒ /search                                276 B         105 kB
+ First Load JS shared by all             101 kB
  ├ chunks/4bd1b696-52a6696c08e3276c.js  53.2 kB
  ├ chunks/684-a90f75b76908eb92.js       45.9 kB
  └ other shared chunks (total)          2.01 kB


○  (Static)   prerendered as static content
ƒ  (Dynamic)  server-rendered on demand