⭐React Server Component

- React 18v부터 새롭게 추가된, 새로운 유형의 컴포넌트
- 🚨서버측에서만 실행된는 컴포넌트(브라우저에서 실행x)
  (서버가 아니면 실행 안됨)
-

💥무슨 말이지 서버 컴포넌트?
기존 컴포넌트와 차이가 뭘까?
🔽Server Componet 분리되기 이전의 이야기
- Page Router 버전의 Nextjs에는 어떤 문제가 있었을까?(등장 배경)
  ㄴ클라이언트 컴포넌트 흐름: 화면의 상호작용을 위해 js bundle로 묶어서 브라우저에 전달하고 브라우저 측에서 하이드레이션(js 영역) 위해 '한 번 더' 실행이 된다.
  ✅Server Component
  상호작용이 없어서 서버측에서만 실행되면 되는 그런 컴포넌트는 서버 컴포넌트로 분류하고
  ㄴ 서버측에서 사전 렌더링을 진행할 때 딱 한번만 실행됨
  ㄴ 🚨app 라우터 하위에 만들면 서버 컴포넌트로 인식함.(따로 지정할 키워드 없음)
  ㄴㄴ 🚨'상호작용이 필요없다면 전부 다 서버 컴포넌트로 만들자.'
   => 💥브라우저가 JS Bundle(서버 컴포넌트까지 포함할시)을 불러오는 시간이 길어지면 하이드레이션을 지행하는 시간도 늘어나 버리기에
       TTI까지 늦어져 버리게된다는 문제점이 있다.

반대로
🔽Server Component 분리 이후
✅ 클라이언트 컴포넌트
상호작용이 있어서 하이드레이션이 필요하기 때문에
서버와 브라우저에서 모두 다 한 번씩 똑같이 실행이 되어야 하는
이런 기존에 우리가 써오고 있었던 클래식한 컴포넌트들이다.
ㄴ 🚨Server Component 로 분리되지 못한 나머지
ㄴ 🚨사전 렌더링 진행할 때 한번, 하이드레이션 진행할 때 한번 (총 2번 실행)

---구분선---

💥Next.js 공식 홈페이지
ㄴ 페이지 대부분을 '서버 컴포넌트'로 구성할 것을 권장(왜? js bundle 용량이 줄어듬)
ㄴㄴ 서버 컴포넌트는 우리가 따로 만들어줄 필요가 없다!
ㄴㄴ App Router에서는 기본적으로 모든 컴포넌트가 다 서버 컴포넌트로 작동하기 때문이다.
ㄴㄴㄴ ⭐서버 컴포넌트 안에서 console.log("출력!")이 안찍히는걸 알 수 있는데 왜? 브라우저(클라이언트)에서 실행되지 않기 때문이다(js bundle에서 제외되니까)
ㄴ 클라이언트 컴포넌트는 꼭 필요한 경우에만 사용할 것.(맨 상단 : "use client"지시자)

---

같이 참고 할 파일 : React Server Component 주의사항
